'use client';

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 C:\Users\Ruben\Downloads\RP-Logo.glb -T --shadows
*/

//TODO: Add react spring light transition

import { useRef, useEffect } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei';
import { a, useSpring } from '@react-spring/three';
import { useColor } from '../lib/themes';

export function RpLogo(props) {
  const { nodes, materials } = useGLTF(
    'https://res.cloudinary.com/ruben-p/image/upload/v1692730013/3D%20Models/Logo/RP-Logo.glb'
  );

  const { transparency } = useSpring({
    config: { mass: 5, tension: 500, friction: 100 },

    to: {
      transparency: 1
    },
    from: { transparency: 0 }
  });

  const myMesh = useRef();

  useFrame(({ clock }) => {
    const a = clock.getElapsedTime() / 3;
    myMesh.current.rotation.y = a;
    let scale = window.screen.width / 600;
    if (scale > 1) {
      scale = 1;
    }
    myMesh.current.scale.set(scale, scale, scale);
  });
  return (
    <group {...props} dispose={null}>
      {[
        {
          position: [-6, 1, 7],
          color: useColor('--color-secondary'),
          intensity: 110,
          distance: 70
        },
        {
          position: [0, 1, 8],
          color: useColor('--color-primary'),
          intensity: 85,
          distance: 80
        },
        {
          position: [6, 1, 7],
          color: useColor('--color-secondary'),
          intensity: 110,
          distance: 70
        }
      ].map((lightProps, index) => (
        <pointLight key={index} {...lightProps} />
      ))}
      <a.mesh
        geometry={nodes['RP_-_Logo001'].geometry}
        material={materials.Abstract}
        material-transparent
        material-opacity={transparency}
        ref={myMesh}
        scale={[1, 1, 1]}
      />
    </group>
  );
}

useGLTF.preload(
  'https://res.cloudinary.com/ruben-p/image/upload/v1692730013/3D%20Models/Logo/RP-Logo.glb'
);
